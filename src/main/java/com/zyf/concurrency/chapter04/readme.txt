4章
    使用组合模式能够使一个类更容易成为线程安全的。
    4.1 设计线程安全的类 - Counter
        在设计线程安全类的过程中，需要包含以下三个基本要素：
            * 找出构成对象状态的所有变量
            * 找出约束变量的不变性条件
            * 建立对象状态的并发访问管理策略

    4.1.1 收集同步需求
        如果不了解对象的不变性条件与后验条件，那么就不能确保线程安全性，
        要满足在状态变量的有效值或状态转换上的各种约束条件，就需要借助原子性与封装性。
    4.1.2 依赖状态的操作
        在某些对象的方法中包含一些先验条件。如不能从空队列中一处一个元素。
        简单实现先验条件的方法就是通过现有库中的类（阻塞队列（Bloking Queue）、信号量(Semaphore)）
        第5章介绍一些阻塞类
        第14章介绍如何使用平台与类库提供的各种底层机制创建依赖状态的类

    4.2 实例封闭 - PersonSet
        将数据封装在对象内部，可以将数据的访问限制在对象的方法上，从而更容易确保线程在访问数据时总能持有正确的锁
        封闭机制更易于构造线程安全的类，因为当封闭类的状态时，在分析类类的线程安全性时就无须检查整个程序

    4.1.2 Java监视器模式 - PrivateLock
        Java监视器仅仅是一种约定，对于任何一种锁对象，只要自始至终都使用该锁对象，都可以用来保护对象的状态
        Java监视器模式优点：
            私有的锁对象可以将锁封装起来，使客户代码无法获得锁，但客户代码可以通过公有方法来访问锁，以便
            （正确或者不正确地）参与到它的同步策略中。